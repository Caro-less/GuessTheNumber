import aiogram, asyncio
from aiogram import Dispatcher, Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from random import randint
from config_reader import config


dp = Dispatcher()
bot = Bot(token=config.bot_token.get_secret_value())
min, max = 0, 100
curr_min, curr_max = 0, 100
curr_guess = -1
curr_num = -1
class Game(StatesGroup):
    before_game = State()
    in_game = State()
    after_game = State()



@dp.message(Command("start"))
async def greet(message: types.Message, state: FSMContext):
    await main_menu(message, message.from_user.full_name, state)

@dp.callback_query(F.data == "menu")
async def greet(query: types.CallbackQuery, state: FSMContext):
    await main_menu(query.message, query.from_user.full_name, state)

async def main_menu(message: types.Message, user_name: str, state: FSMContext):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–¢—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ—à—å!", callback_data="user_g"), types.InlineKeyboardButton(text = "–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é!", callback_data="bot_g")]
    ])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –ü–æ–∏–≥—Ä–∞–µ–º?", reply_markup = kb)
    await state.set_state(Game.before_game)

@dp.callback_query(F.data == "user_g")
async def begin_game(query: types.CallbackQuery, state: FSMContext):
    global curr_num
    curr_num = randint(min, max)
    await state.update_data(mode="bot")
    await query.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç {min} –¥–æ {max}! \n–ü–∏—à–∏ —Å–≤–æ–∏ –¥–æ–≥–∞–¥–∫–∏")
    await state.set_state(Game.in_game)

@dp.callback_query(F.data == "bot_g")
async def begin_game(query: types.CallbackQuery, state: FSMContext):
    await state.update_data(mode="user")
    await query.message.answer(f"–•–æ—Ä–æ—à–æ, –∑–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç –æ—Ç {min} –¥–æ {max}, –∞ —è –ø–æ–ø—ã—Ç–∞—é—Å—å —É–≥–∞–¥–∞—Ç—å. –ì–æ—Ç–æ–≤?\n\n–ü–∏—à–∏ '–±–æ–ª—å—à–µ', '–º–µ–Ω—å—à–µ' –∏–ª–∏ '—É–≥–∞–¥–∞–ª'")
    await state.set_state(Game.in_game)
    await asyncio.sleep(1)
    await guess_num(query.message)
    
async def guess_num(message: types.Message):
    global curr_guess
    curr_guess = randint(curr_min, curr_max)
    await message.answer(f"–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —á–∏—Å–ª–æ {curr_guess}")
    

@dp.message(Game.in_game)    
async def start(message: types.Message, state: FSMContext):
    msg = message.text
    data = await state.get_data()
    mode = data["mode"]
    global curr_min
    global curr_max
    global curr_guess
    if mode == "bot":
        if not msg.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ üôÇ")
            return    
        if int(msg)>curr_num:
            await message.answer("–ú–µ–Ω—å—à–µ!")
        elif int(msg)<curr_num:
            await message.answer("–ë–æ–ª—å—à–µ")
        else:
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ï—â–µ —Ä–∞–∑!", callback_data="menu")]
        ])
            await message.answer("–£–≥–∞–¥–∞–ª! –°—ã–≥—Ä–∞–µ–º –µ—â–µ?", reply_markup=kb)
            await set_default_values()
            await state.set_state(Game.after_game)
        
    if mode == "user":
        if msg=="–±–æ–ª—å—à–µ":
            curr_min = curr_guess+1
            await guess_num(message)
        elif msg=="–º–µ–Ω—å—à–µ":
            curr_max = curr_guess-1
            await guess_num(message)
        elif msg=="—É–≥–∞–¥–∞–ª":
            kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ï—â–µ —Ä–∞–∑!", callback_data="menu")]
        ])
            await message.answer("–£—Ä–∞! –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=kb)
            await set_default_values()
            await state.set_state(Game.after_game)
        else:
            message.answer("–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏")

async def set_default_values():
    global curr_guess
    global curr_min
    global curr_max
    curr_min, curr_max, curr_guess = 0, 100, -1
    

async def main():
    # –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
